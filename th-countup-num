<link rel="import" href="../bower_components/polymer/polymer.html">
<link rel="import" href="thelma_core.html">
<link rel="import" href="th-text.html">

<polymer-element name="th-countup-num" extends="th-animated" attributes="startFrom startFromSameNumberOfDigit duration numberSize type" >
  <template>
      <core-style ref="theme"></core-style>
      <style>
        :host {
          display: inline-block;
          position: relative;
        }
        
        span {
          padding:0;
          margin: 0;
        }

        #num, #unit_before, #unit_after {
          font-size: {{numberSize}};
        }
      </style>
      <div id="container">
        <th-text markdown="false" type="{{type}}">  
          <span id="before_num"></span><span id="unit_before"></span><span id="num"></span><span id="unit_after"></span><span id="after_num"></span>
        </th-text>
      </div>
  </template>
  <script src="../bower_components/countUp.js/countUp.js"></script> 
  <script>
 
      Polymer('th-countup-num', {
        startFrom: -1,
        startFromSameNumberOfDigit: true,  // to make sure span with remains the same
        duration: 2,
        ready: function() {

            this.init();

        },
        init: function() {
          var content = this.textContent;

          //TODO validation
          var number = content.match(/\d+/g);
          var digits = number.toString().length;
          
          var beforeAfter = content.split(/\d+/,2);
          
          var container = this.$.container;
          var beforeEl = this.$.before_num;
          var numEl = this.$.num;
          var afterEl = this.$.after_num;
          var unitBefore = this.$.unit_before;
          var unitAfter = this.$.unit_after;

          // container.className = this.type; // don't need this with text component included

          if(beforeAfter && beforeAfter.length>0) {
            var splitUnitsBefore = beforeAfter[0].match(/(.*)(#|%|\$)$/); // matches 1) everything else 2) symbol at the end of the line 
            if (splitUnitsBefore) {
              beforeEl.innerText = splitUnitsBefore[1];
              unitBefore.innerText = splitUnitsBefore[2];
            } else {
              beforeEl.innerText = beforeAfter[0];
            }
          }

          if(beforeAfter && beforeAfter.length>1) {
            var splitUnitsAfter = beforeAfter[1].match(/^(#|%|\$)(.*)/); // matches 1) symbol at beginning of line 2) everything else
            if (splitUnitsAfter) {
              afterEl.innerText = splitUnitsAfter[2];
              unitAfter.innerText = splitUnitsAfter[1];
            } else {
              afterEl.innerText = beforeAfter[1];
            }
          }
          

          var start = (Boolean(this.startFromSameNumberOfDigit) && this.startFrom<0) ? Math.pow(10,digits-1) : this.startFrom;
          

          this.cnt = new countUp(numEl, start, number[0], 0, this.duration);

        },
        reset: function() {
          this.cnt.reset();
        },
        animate: function() {
          this.cnt.start();

        }
      });

  </script>


</polymer-element>